package gui.controls{	import flash.display.Sprite;	import flash.geom.Point;	import flash.events.MouseEvent;	public class HorizontalScrollBar extends HorizontalSlider	{		protected static const ARROWS_BG_COLOR = 0x666666;		protected static const ARROWS_SIZE = 10;		protected static const SCROLL_SPEED = .1;				protected var _upArrow:Sprite = new Sprite();		protected var _downArrow:Sprite = new Sprite();				protected var _autoHide = true;				public function get autoHide():Boolean { return _autoHide; }		public function set autoHide(value:Boolean):void {			_autoHide = value;		}				protected function get isNeeded():Boolean {			return _width < maximum;		}		/**		 * Overridings of <code>VerticalSlider</code>		 */		override protected function get markerMinimum():Number { return ARROWS_SIZE; }		override protected function get markerMaximum():Number { return _width - ARROWS_SIZE; }				/**		 * Constructor. Creates new instance of <code>HorizontalScrollBar</code>		 * 		 * @param	w		Width in pixels of current control.		 * @param	h		Height in pixels of current control.		 */		 public function HorizontalScrollBar(w:Number = 0, h:Number = 0) {			super(w, h);			_upArrow.addEventListener(MouseEvent.MOUSE_DOWN, arrow_onMouseDown);			_downArrow.addEventListener(MouseEvent.MOUSE_DOWN, arrow_onMouseDown);			addChild(_upArrow);			addChild(_downArrow);		}				// executes when the up arrow is pressed		protected function arrow_onMouseDown(e:MouseEvent):void		{			var dir = (e.target == _upArrow) ? -1 : 1;			percent += dir * SCROLL_SPEED;			trace("marker size: " + (new Point(_marker.width, _marker.height)));			trace("marker position: " + (new Point(_marker.x, _marker.y)));			trace("markerSize : " + markerSize);		}				override public function draw():void {			super.draw();						_upArrow.graphics.clear();			_upArrow.graphics.beginFill(ARROWS_BG_COLOR);			_upArrow.graphics.drawRect(0, 0, ARROWS_SIZE, _height);			_upArrow.graphics.endFill();						_downArrow.graphics.clear();			_downArrow.graphics.beginFill(ARROWS_BG_COLOR);			_downArrow.graphics.drawRect(0, 0, ARROWS_SIZE, _height);			_downArrow.graphics.endFill();						_downArrow.x = _width - _downArrow.width;						hideIfNotNeeded();		}				protected function hideIfNotNeeded():void {			if(autoHide) this.visible = isNeeded;		}	}}